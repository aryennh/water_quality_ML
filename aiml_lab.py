# -*- coding: utf-8 -*-
"""AIML LAB

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/120wKllUV3EL551x2jWS4dkmx4adS7Bka
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

"""**LINEAR REGRESSION**"""

data = pd.read_csv('Bengaluru_dataset.csv')  # Assuming the data is in a CSV file named 'water_data.csv'

# Encode the 'Name of Lake' column
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
data['Lake_Encoded'] = label_encoder.fit_transform(data['Name'])
#print(data['Lake_Encoded'].dtype)

data.dropna(inplace=True)

features = data[['Lake_Encoded', 'Year']]
target = data[['pH Min', 'pH Max']]

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

#linear regression
model = LinearRegression()
model.fit(X_train,y_train)

predictions = model.predict(features)
mse = mean_squared_error(target, predictions)
print("Mean Squared Error:", mse)

future_data = pd.DataFrame({'Name': ['HEBALLA VALLEY LAKE AT D/S ROAD BRIDGE NR. MAYA, KARNATAKA', 'SHETTYKERE LAKE'],
                            'Year': [2024, 2025]})

future_features = pd.get_dummies(future_data[['Name', 'Year']])

future_features = pd.get_dummies(future_data[['Name', 'Year']])
future_features = future_features.reindex(columns=features.columns, fill_value=0)

future_predictions = model.predict(future_features)

predicted_data = pd.DataFrame({
    'Name': future_data['Name'],
    'Year': future_data['Year'],
    'predicted_pH_min': [p[0] for p in future_predictions],
    'predicted_pH_max': [p[1] for p in future_predictions]
})

# Optional: Save the predicted data to a file
predicted_data.to_csv('predicted_data.csv', index=False)

"""**LSTM**"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.metrics import mean_squared_error

data = pd.read_csv('Bengaluru_dataset.csv')
print(len(data))

# data['DO Min'] = data['DO Min'].replace(['BDL'], np.nan)
# data['Nitrate Min'] = data['Nitrate Min'].replace(['BDL'], np.nan)
# data['BOD Min'] = data['BOD Min'].replace(['BDL'], np.nan)
# data['Faecal Coli Form Min'] = data['Faecal Coli Form Min'].replace(['-'], np.nan)
# data['Faecal Coli Form Max'] = data['Faecal Coli Form Max'].replace(['-'], np.nan)
# data['Total Coli Form Min']  = data['Total Coli Form Min'].replace(['-'], np.nan)
# data['Total Coli Form Max'] = data['Total Coli Form Max'].replace(['-'], np.nan)
# data = data.dropna()
data = data.drop(data[data.apply(lambda x: 'BDL' in x.values, axis=1)].index)
print(len(data))
data = data.drop(data[data.apply(lambda x: '-' in x.values, axis=1)].index)
print(len(data))

# Select the relevant columns
# columns = ['Temperature Min', 'Temperature Max', 'DO Min', 'DO Max',
#            'Conductivity Min', 'Conductivity Max', 'BOD Min', 'BOD Max',
#            'Nitrate Min', 'Nitrate Max', 'Faecal Coli Form Min', 'Faecal Coli Form Max',
#            'Total Coli Form Min', 'Total Coli Form Max', 'pH Min', 'pH Max']

# data = data[columns]
data = data.groupby(['Name', 'Year','Temperature Min', 'Temperature Max', 'DO Min', 'DO Max',
            'Conductivity Min', 'Conductivity Max', 'BOD Min', 'BOD Max',
            'Nitrate Min', 'Nitrate Max', 'Faecal Coli Form Min', 'Faecal Coli Form Max',
            'Total Coli Form Min', 'Total Coli Form Max']).agg({'pH Min': 'min', 'pH Max': 'max'})
data.reset_index(inplace=True)

# Prepare the data for LSTM training
water_bodies = data['Name'].unique()

print(water_bodies)
n_steps = 5  # Use the past 5 years of data for each prediction
X, y_min, y_max = [], [], []

for water_body in water_bodies:
    water_body_data = data[data['Name'] == water_body]
    for i in range(n_steps, len(water_body_data)):
        X.append(water_body_data.iloc[i - n_steps:i][['Year', 'Temperature Min', 'Temperature Max', 'DO Min', 'DO Max', 'Conductivity Min', 'Conductivity Max', 'BOD Min', 'BOD Max', 'Nitrate Min', 'Nitrate Max', 'Faecal Coli Form Min', 'Faecal Coli Form Max', 'Total Coli Form Min', 'Total Coli Form Max']].values)
        y_min.append(water_body_data.iloc[i]['pH Min'])
        y_max.append(water_body_data.iloc[i]['pH Max'])

X = np.array(X)
y_min = np.array(y_min)
y_max = np.array(y_max)

import numpy as np

X, y_min, y_max = np.array(X), np.array(y_min), np.array(y_max)
X = X.reshape(X.shape[0], n_steps, X.shape[2])
data = data.drop('Name',axis=1)

# Normalize the input features
scaler = MinMaxScaler()
data_scaled = scaler.fit_transform(data)

# Split the data into input (X) and output (y) variables
X = data_scaled[:, :-2]  # Input features (all columns except pH Min and pH Max)
y = data_scaled[:, -2:]  # Output targets (pH Min and pH Max)

# Reshape the input data to fit the LSTM model requirements
time_steps = 5  # Number of time steps to consider
X_reshaped = []
y_reshaped = []
for i in range(time_steps, len(X)):
    X_reshaped.append(X[i - time_steps:i, :])
    y_reshaped.append(y[i])

X_reshaped = np.array(X_reshaped)

print(len(X_reshaped))
print(len(y_reshaped))

# Split the data into training and testing sets
train_size = int(0.8 * len(X))  # 80% for training, change this ratio as per your preference
print(len(X))
print(train_size)
X_train, X_test = X[:train_size], X[train_size:]
y_min_train, y_min_test = y_min[:train_size], y_min[train_size:]
y_max_train, y_max_test = y_max[:train_size], y_max[train_size:]



X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
# X_train = X_train.astype('float32')
# y_min_train = y_min_train.astype('float32')

print(len(X_train))
print(len(y_min_train))
print(len(X_test))
print(len(y_min_test))

model = Sequential()
#, input_shape=(n_steps, X.shape[2]) in the first one
model.add(LSTM(64, activation='relu', return_sequences=True))
model.add(LSTM(64, activation='relu', return_sequences=True))
model.add(LSTM(64, activation='relu', return_sequences=True))
model.add(LSTM(64, activation='relu', return_sequences=True))
model.add(LSTM(64, activation='relu', return_sequences=True))
model.add(LSTM(64, activation='relu', return_sequences=True))
model.add(LSTM(64, activation='relu', return_sequences=True))
model.add(LSTM(64, activation='relu'))
model.add(Dense(1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Step 4: Train the model for pH Min
print(X_train.shape,y_min_train.shape)
model.fit(X_train, y_min_train, epochs=50, batch_size=16)

X_test = np.nan_to_num(X_test, nan=0.0)
X_test = X_test.astype('float32')

y_pred_min = model.predict(X_test)
mse_min = mean_squared_error(y_min_test, y_pred_min)
print("Mean Squared Error (pH Min):", mse_min)
print(len(y_pred_min))

#prediction
input_data = pd.read_csv('input_data.csv')

